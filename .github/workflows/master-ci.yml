name: CI

on:
  push:
    branches:
      - master

    tags:
      - v*

env:
  APP_NAME: ${{ github.event.repository.name }}

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: "^1.18.0"

      - run: go version

      - name: Linting
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest

  build:
    needs:
      - lint

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/go-cache

      - name: Build
        shell: bash
        run: go build -o $APP_NAME cmd/main.go

      - name: Check build file
        uses: andstor/file-existence-action@v1
        with:
          files: ${{ env.APP_NAME }}
          allow_failure: true

  dockerize:
    needs:
      - build

    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        shell: bash
        run: |
          docker build . --file Dockerfile --tag $APP_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to container registry
        shell: bash
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Push image to container registry
        shell: bash
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$APP_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $APP_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  unit-test:
    needs:
      - dockerize

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/go-cache

      - name: Run tests
        shell: bash
        run: go test -tags=unit ./...

  coverage:
    needs:
      - unit-test

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/go-cache

      - name: Generate coverage report
        shell: bash
        run: |
          go test -tags=unit -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check coverage result file
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.out"
          allow_failure: true

      - name: Upload coverage results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-result
          path: ./coverage.out

  analysis:
    needs:
      - coverage

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: coverage-result

      - name: Check coverage result file
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.out"
          allow_failure: true

      - name: Static code analysis
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_REPO_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}